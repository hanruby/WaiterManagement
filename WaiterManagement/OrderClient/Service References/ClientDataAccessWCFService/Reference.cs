//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderClient.ClientDataAccessWCFService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientDataAccessWCFService.IManagerDataAccessWCFService")]
    public interface IManagerDataAccessWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        ClassLib.DataStructures.UserContext LogIn([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext> LogInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        bool LogOut(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        System.Threading.Tasks.Task<bool> LogOutAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        ClassLib.DataStructures.MenuItemCategory[] GetMenuItemCategories(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        ClassLib.DataStructures.MenuItem[] GetMenuItems(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItem[]> GetMenuItemsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        ClassLib.DataStructures.Table[] GetTables(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.Table[]> GetTablesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddManager", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddManagerResponse")]
        ClassLib.DataStructures.UserContext AddManager(string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddManager", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddManagerResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext> AddManagerAsync(string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemCategoryResponse")]
        ClassLib.DataStructures.MenuItemCategory AddMenuItemCategory(int managerId, string name, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemCategoryResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItemCategory> AddMenuItemCategoryAsync(int managerId, string name, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemCategoryResponse")]
        bool EditMenuItemCategory(int managerId, ClassLib.DataStructures.MenuItemCategory menuItemCategoryToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemCategoryResponse")]
        System.Threading.Tasks.Task<bool> EditMenuItemCategoryAsync(int managerId, ClassLib.DataStructures.MenuItemCategory menuItemCategoryToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemCategoryResponse")]
        bool RemoveMenuItemCategory(int managerId, int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemCategoryResponse")]
        System.Threading.Tasks.Task<bool> RemoveMenuItemCategoryAsync(int managerId, int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemResponse")]
        ClassLib.DataStructures.MenuItem AddMenuItem(int managerId, string name, string description, int categoryId, ClassLib.DataStructures.Money price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItem> AddMenuItemAsync(int managerId, string name, string description, int categoryId, ClassLib.DataStructures.Money price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemResponse")]
        bool EditMenuItem(int managerId, ClassLib.DataStructures.MenuItem menuItemToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemResponse")]
        System.Threading.Tasks.Task<bool> EditMenuItemAsync(int managerId, ClassLib.DataStructures.MenuItem menuItemToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemResponse")]
        bool RemoveMenuItem(int managerId, int menuItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemResponse")]
        System.Threading.Tasks.Task<bool> RemoveMenuItemAsync(int managerId, int menuItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddWaiterResponse")]
        ClassLib.DataStructures.UserContext AddWaiter(int managerId, string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddWaiterResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext> AddWaiterAsync(int managerId, string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditWaiterResponse")]
        bool EditWaiter(int managerId, ClassLib.DataStructures.UserContext waiterToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditWaiterResponse")]
        System.Threading.Tasks.Task<bool> EditWaiterAsync(int managerId, ClassLib.DataStructures.UserContext waiterToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveWaiterResponse")]
        bool RemoveWaiter(int managerId, int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveWaiterResponse")]
        System.Threading.Tasks.Task<bool> RemoveWaiterAsync(int managerId, int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/GetWaiters", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/GetWaitersResponse")]
        ClassLib.DataStructures.UserContext[] GetWaiters(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/GetWaiters", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/GetWaitersResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext[]> GetWaitersAsync(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddTableResponse")]
        ClassLib.DataStructures.Table AddTable(int managerId, int tableNumber, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddTableResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.Table> AddTableAsync(int managerId, int tableNumber, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditTableResponse")]
        bool EditTable(int managerId, ClassLib.DataStructures.Table tableToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditTableResponse")]
        System.Threading.Tasks.Task<bool> EditTableAsync(int managerId, ClassLib.DataStructures.Table tableToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveTableResponse")]
        bool RemoveTable(int managerId, int tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveTableResponse")]
        System.Threading.Tasks.Task<bool> RemoveTableAsync(int managerId, int tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/GetOrders", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/GetOrdersResponse")]
        ClassLib.DataStructures.Order[] GetOrders(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/GetOrders", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/GetOrdersResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.Order[]> GetOrdersAsync(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveOrder", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveOrderResponse")]
        bool RemoveOrder(int managerId, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveOrder", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveOrderResponse")]
        System.Threading.Tasks.Task<bool> RemoveOrderAsync(int managerId, int orderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManagerDataAccessWCFServiceChannel : OrderClient.ClientDataAccessWCFService.IManagerDataAccessWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManagerDataAccessWCFServiceClient : System.ServiceModel.ClientBase<OrderClient.ClientDataAccessWCFService.IManagerDataAccessWCFService>, OrderClient.ClientDataAccessWCFService.IManagerDataAccessWCFService {
        
        public ManagerDataAccessWCFServiceClient() {
        }
        
        public ManagerDataAccessWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManagerDataAccessWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerDataAccessWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerDataAccessWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClassLib.DataStructures.UserContext LogIn(string login1, string password) {
            return base.Channel.LogIn(login1, password);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext> LogInAsync(string login, string password) {
            return base.Channel.LogInAsync(login, password);
        }
        
        public bool LogOut(int id) {
            return base.Channel.LogOut(id);
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync(int id) {
            return base.Channel.LogOutAsync(id);
        }
        
        public ClassLib.DataStructures.MenuItemCategory[] GetMenuItemCategories(int userId) {
            return base.Channel.GetMenuItemCategories(userId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId) {
            return base.Channel.GetMenuItemCategoriesAsync(userId);
        }
        
        public ClassLib.DataStructures.MenuItem[] GetMenuItems(int userId) {
            return base.Channel.GetMenuItems(userId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItem[]> GetMenuItemsAsync(int userId) {
            return base.Channel.GetMenuItemsAsync(userId);
        }
        
        public ClassLib.DataStructures.Table[] GetTables(int userId) {
            return base.Channel.GetTables(userId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.Table[]> GetTablesAsync(int userId) {
            return base.Channel.GetTablesAsync(userId);
        }
        
        public ClassLib.DataStructures.UserContext AddManager(string firstName, string lastName, string login, string password) {
            return base.Channel.AddManager(firstName, lastName, login, password);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext> AddManagerAsync(string firstName, string lastName, string login, string password) {
            return base.Channel.AddManagerAsync(firstName, lastName, login, password);
        }
        
        public ClassLib.DataStructures.MenuItemCategory AddMenuItemCategory(int managerId, string name, string description) {
            return base.Channel.AddMenuItemCategory(managerId, name, description);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItemCategory> AddMenuItemCategoryAsync(int managerId, string name, string description) {
            return base.Channel.AddMenuItemCategoryAsync(managerId, name, description);
        }
        
        public bool EditMenuItemCategory(int managerId, ClassLib.DataStructures.MenuItemCategory menuItemCategoryToEdit) {
            return base.Channel.EditMenuItemCategory(managerId, menuItemCategoryToEdit);
        }
        
        public System.Threading.Tasks.Task<bool> EditMenuItemCategoryAsync(int managerId, ClassLib.DataStructures.MenuItemCategory menuItemCategoryToEdit) {
            return base.Channel.EditMenuItemCategoryAsync(managerId, menuItemCategoryToEdit);
        }
        
        public bool RemoveMenuItemCategory(int managerId, int categoryId) {
            return base.Channel.RemoveMenuItemCategory(managerId, categoryId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMenuItemCategoryAsync(int managerId, int categoryId) {
            return base.Channel.RemoveMenuItemCategoryAsync(managerId, categoryId);
        }
        
        public ClassLib.DataStructures.MenuItem AddMenuItem(int managerId, string name, string description, int categoryId, ClassLib.DataStructures.Money price) {
            return base.Channel.AddMenuItem(managerId, name, description, categoryId, price);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItem> AddMenuItemAsync(int managerId, string name, string description, int categoryId, ClassLib.DataStructures.Money price) {
            return base.Channel.AddMenuItemAsync(managerId, name, description, categoryId, price);
        }
        
        public bool EditMenuItem(int managerId, ClassLib.DataStructures.MenuItem menuItemToEdit) {
            return base.Channel.EditMenuItem(managerId, menuItemToEdit);
        }
        
        public System.Threading.Tasks.Task<bool> EditMenuItemAsync(int managerId, ClassLib.DataStructures.MenuItem menuItemToEdit) {
            return base.Channel.EditMenuItemAsync(managerId, menuItemToEdit);
        }
        
        public bool RemoveMenuItem(int managerId, int menuItemId) {
            return base.Channel.RemoveMenuItem(managerId, menuItemId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMenuItemAsync(int managerId, int menuItemId) {
            return base.Channel.RemoveMenuItemAsync(managerId, menuItemId);
        }
        
        public ClassLib.DataStructures.UserContext AddWaiter(int managerId, string firstName, string lastName, string login, string password) {
            return base.Channel.AddWaiter(managerId, firstName, lastName, login, password);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext> AddWaiterAsync(int managerId, string firstName, string lastName, string login, string password) {
            return base.Channel.AddWaiterAsync(managerId, firstName, lastName, login, password);
        }
        
        public bool EditWaiter(int managerId, ClassLib.DataStructures.UserContext waiterToEdit) {
            return base.Channel.EditWaiter(managerId, waiterToEdit);
        }
        
        public System.Threading.Tasks.Task<bool> EditWaiterAsync(int managerId, ClassLib.DataStructures.UserContext waiterToEdit) {
            return base.Channel.EditWaiterAsync(managerId, waiterToEdit);
        }
        
        public bool RemoveWaiter(int managerId, int waiterId) {
            return base.Channel.RemoveWaiter(managerId, waiterId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveWaiterAsync(int managerId, int waiterId) {
            return base.Channel.RemoveWaiterAsync(managerId, waiterId);
        }
        
        public ClassLib.DataStructures.UserContext[] GetWaiters(int managerId) {
            return base.Channel.GetWaiters(managerId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext[]> GetWaitersAsync(int managerId) {
            return base.Channel.GetWaitersAsync(managerId);
        }
        
        public ClassLib.DataStructures.Table AddTable(int managerId, int tableNumber, string description) {
            return base.Channel.AddTable(managerId, tableNumber, description);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.Table> AddTableAsync(int managerId, int tableNumber, string description) {
            return base.Channel.AddTableAsync(managerId, tableNumber, description);
        }
        
        public bool EditTable(int managerId, ClassLib.DataStructures.Table tableToEdit) {
            return base.Channel.EditTable(managerId, tableToEdit);
        }
        
        public System.Threading.Tasks.Task<bool> EditTableAsync(int managerId, ClassLib.DataStructures.Table tableToEdit) {
            return base.Channel.EditTableAsync(managerId, tableToEdit);
        }
        
        public bool RemoveTable(int managerId, int tableId) {
            return base.Channel.RemoveTable(managerId, tableId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTableAsync(int managerId, int tableId) {
            return base.Channel.RemoveTableAsync(managerId, tableId);
        }
        
        public ClassLib.DataStructures.Order[] GetOrders(int managerId) {
            return base.Channel.GetOrders(managerId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.Order[]> GetOrdersAsync(int managerId) {
            return base.Channel.GetOrdersAsync(managerId);
        }
        
        public bool RemoveOrder(int managerId, int orderId) {
            return base.Channel.RemoveOrder(managerId, orderId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOrderAsync(int managerId, int orderId) {
            return base.Channel.RemoveOrderAsync(managerId, orderId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientDataAccessWCFService.IWaiterDataAccessWCFService")]
    public interface IWaiterDataAccessWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        ClassLib.DataStructures.UserContext LogIn([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext> LogInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        bool LogOut(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        System.Threading.Tasks.Task<bool> LogOutAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        ClassLib.DataStructures.MenuItemCategory[] GetMenuItemCategories(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        ClassLib.DataStructures.MenuItem[] GetMenuItems(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItem[]> GetMenuItemsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        ClassLib.DataStructures.Table[] GetTables(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.Table[]> GetTablesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetAllPastOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetAllPastOrdersResponse")]
        ClassLib.DataStructures.Order[] GetAllPastOrders(int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetAllPastOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetAllPastOrdersResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.Order[]> GetAllPastOrdersAsync(int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetPastOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetPastOrdersResponse")]
        ClassLib.DataStructures.Order[] GetPastOrders(int waiterId, int firstIndex, int lastIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetPastOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetPastOrdersResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.Order[]> GetPastOrdersAsync(int waiterId, int firstIndex, int lastIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetActiveOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetActiveOrdersResponse")]
        ClassLib.DataStructures.Order[] GetActiveOrders(int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetActiveOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetActiveOrdersResponse")]
        System.Threading.Tasks.Task<ClassLib.DataStructures.Order[]> GetActiveOrdersAsync(int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/SetOrderState", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/SetOrderStateResponse")]
        bool SetOrderState(int waiterId, int orderId, ClassLib.DataStructures.OrderState state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/SetOrderState", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/SetOrderStateResponse")]
        System.Threading.Tasks.Task<bool> SetOrderStateAsync(int waiterId, int orderId, ClassLib.DataStructures.OrderState state);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWaiterDataAccessWCFServiceChannel : OrderClient.ClientDataAccessWCFService.IWaiterDataAccessWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WaiterDataAccessWCFServiceClient : System.ServiceModel.ClientBase<OrderClient.ClientDataAccessWCFService.IWaiterDataAccessWCFService>, OrderClient.ClientDataAccessWCFService.IWaiterDataAccessWCFService {
        
        public WaiterDataAccessWCFServiceClient() {
        }
        
        public WaiterDataAccessWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WaiterDataAccessWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WaiterDataAccessWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WaiterDataAccessWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClassLib.DataStructures.UserContext LogIn(string login1, string password) {
            return base.Channel.LogIn(login1, password);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.UserContext> LogInAsync(string login, string password) {
            return base.Channel.LogInAsync(login, password);
        }
        
        public bool LogOut(int id) {
            return base.Channel.LogOut(id);
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync(int id) {
            return base.Channel.LogOutAsync(id);
        }
        
        public ClassLib.DataStructures.MenuItemCategory[] GetMenuItemCategories(int userId) {
            return base.Channel.GetMenuItemCategories(userId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId) {
            return base.Channel.GetMenuItemCategoriesAsync(userId);
        }
        
        public ClassLib.DataStructures.MenuItem[] GetMenuItems(int userId) {
            return base.Channel.GetMenuItems(userId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.MenuItem[]> GetMenuItemsAsync(int userId) {
            return base.Channel.GetMenuItemsAsync(userId);
        }
        
        public ClassLib.DataStructures.Table[] GetTables(int userId) {
            return base.Channel.GetTables(userId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.Table[]> GetTablesAsync(int userId) {
            return base.Channel.GetTablesAsync(userId);
        }
        
        public ClassLib.DataStructures.Order[] GetAllPastOrders(int waiterId) {
            return base.Channel.GetAllPastOrders(waiterId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.Order[]> GetAllPastOrdersAsync(int waiterId) {
            return base.Channel.GetAllPastOrdersAsync(waiterId);
        }
        
        public ClassLib.DataStructures.Order[] GetPastOrders(int waiterId, int firstIndex, int lastIndex) {
            return base.Channel.GetPastOrders(waiterId, firstIndex, lastIndex);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.Order[]> GetPastOrdersAsync(int waiterId, int firstIndex, int lastIndex) {
            return base.Channel.GetPastOrdersAsync(waiterId, firstIndex, lastIndex);
        }
        
        public ClassLib.DataStructures.Order[] GetActiveOrders(int waiterId) {
            return base.Channel.GetActiveOrders(waiterId);
        }
        
        public System.Threading.Tasks.Task<ClassLib.DataStructures.Order[]> GetActiveOrdersAsync(int waiterId) {
            return base.Channel.GetActiveOrdersAsync(waiterId);
        }
        
        public bool SetOrderState(int waiterId, int orderId, ClassLib.DataStructures.OrderState state) {
            return base.Channel.SetOrderState(waiterId, orderId, state);
        }
        
        public System.Threading.Tasks.Task<bool> SetOrderStateAsync(int waiterId, int orderId, ClassLib.DataStructures.OrderState state) {
            return base.Channel.SetOrderStateAsync(waiterId, orderId, state);
        }
    }
}
