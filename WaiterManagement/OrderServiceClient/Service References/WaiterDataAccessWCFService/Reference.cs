//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderServiceClient.WaiterDataAccessWCFService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseTransferObject", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OrderServiceClient.WaiterDataAccessWCFService.MenuItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OrderServiceClient.WaiterDataAccessWCFService.Table))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OrderServiceClient.WaiterDataAccessWCFService.Order))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OrderServiceClient.WaiterDataAccessWCFService.MenuItemQuantity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OrderServiceClient.WaiterDataAccessWCFService.UserContext))]
    public partial class BaseTransferObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MenuItemCategory", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    [System.SerializableAttribute()]
    public partial class MenuItemCategory : OrderServiceClient.WaiterDataAccessWCFService.BaseTransferObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MenuItem", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    [System.SerializableAttribute()]
    public partial class MenuItem : OrderServiceClient.WaiterDataAccessWCFService.BaseTransferObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrderServiceClient.WaiterDataAccessWCFService.Money PriceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrderServiceClient.WaiterDataAccessWCFService.Money Price {
            get {
                return this.PriceField;
            }
            set {
                if ((object.ReferenceEquals(this.PriceField, value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Table", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    [System.SerializableAttribute()]
    public partial class Table : OrderServiceClient.WaiterDataAccessWCFService.BaseTransferObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    [System.SerializableAttribute()]
    public partial class Order : OrderServiceClient.WaiterDataAccessWCFService.BaseTransferObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrderServiceClient.WaiterDataAccessWCFService.UserContext ClientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ClosingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrderServiceClient.WaiterDataAccessWCFService.MenuItemQuantity[] MenuItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlacingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrderServiceClient.WaiterDataAccessWCFService.OrderState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrderServiceClient.WaiterDataAccessWCFService.Table TableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrderServiceClient.WaiterDataAccessWCFService.UserContext WaiterField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrderServiceClient.WaiterDataAccessWCFService.UserContext Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ClosingDate {
            get {
                return this.ClosingDateField;
            }
            set {
                if ((this.ClosingDateField.Equals(value) != true)) {
                    this.ClosingDateField = value;
                    this.RaisePropertyChanged("ClosingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItemQuantity[] MenuItems {
            get {
                return this.MenuItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.MenuItemsField, value) != true)) {
                    this.MenuItemsField = value;
                    this.RaisePropertyChanged("MenuItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlacingDate {
            get {
                return this.PlacingDateField;
            }
            set {
                if ((this.PlacingDateField.Equals(value) != true)) {
                    this.PlacingDateField = value;
                    this.RaisePropertyChanged("PlacingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrderServiceClient.WaiterDataAccessWCFService.OrderState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrderServiceClient.WaiterDataAccessWCFService.Table Table {
            get {
                return this.TableField;
            }
            set {
                if ((object.ReferenceEquals(this.TableField, value) != true)) {
                    this.TableField = value;
                    this.RaisePropertyChanged("Table");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrderServiceClient.WaiterDataAccessWCFService.UserContext Waiter {
            get {
                return this.WaiterField;
            }
            set {
                if ((object.ReferenceEquals(this.WaiterField, value) != true)) {
                    this.WaiterField = value;
                    this.RaisePropertyChanged("Waiter");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MenuItemQuantity", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    [System.SerializableAttribute()]
    public partial class MenuItemQuantity : OrderServiceClient.WaiterDataAccessWCFService.BaseTransferObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrderServiceClient.WaiterDataAccessWCFService.MenuItem MenuItemField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItem MenuItem {
            get {
                return this.MenuItemField;
            }
            set {
                if ((object.ReferenceEquals(this.MenuItemField, value) != true)) {
                    this.MenuItemField = value;
                    this.RaisePropertyChanged("MenuItem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserContext", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    [System.SerializableAttribute()]
    public partial class UserContext : OrderServiceClient.WaiterDataAccessWCFService.BaseTransferObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OrderServiceClient.WaiterDataAccessWCFService.UserRole RoleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrderServiceClient.WaiterDataAccessWCFService.UserRole Role {
            get {
                return this.RoleField;
            }
            set {
                if ((this.RoleField.Equals(value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserRole", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    public enum UserRole : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Client = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Waiter = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manager = 256,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Money", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    [System.SerializableAttribute()]
    public partial class Money : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Currency {
            get {
                return this.CurrencyField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyField, value) != true)) {
                    this.CurrencyField = value;
                    this.RaisePropertyChanged("Currency");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderState", Namespace="http://schemas.datacontract.org/2004/07/ClassLib.DataStructures")]
    public enum OrderState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Placed = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Accepted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Realized = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotRealized = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AwaitingDelivery = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TupleOfintint", Namespace="http://schemas.datacontract.org/2004/07/System")]
    [System.SerializableAttribute()]
    public partial class TupleOfintint : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int m_Item1Field;
        
        private int m_Item2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_Item1 {
            get {
                return this.m_Item1Field;
            }
            set {
                if ((this.m_Item1Field.Equals(value) != true)) {
                    this.m_Item1Field = value;
                    this.RaisePropertyChanged("m_Item1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_Item2 {
            get {
                return this.m_Item2Field;
            }
            set {
                if ((this.m_Item2Field.Equals(value) != true)) {
                    this.m_Item2Field = value;
                    this.RaisePropertyChanged("m_Item2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WaiterDataAccessWCFService.IManagerDataAccessWCFService")]
    public interface IManagerDataAccessWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.UserContext LogIn([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> LogInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        bool LogOut(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        System.Threading.Tasks.Task<bool> LogOutAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[] GetMenuItemCategories(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.MenuItem[] GetMenuItems(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItem[]> GetMenuItemsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.Table[] GetTables(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Table[]> GetTablesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddManager", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddManagerResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.UserContext AddManager(string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddManager", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddManagerResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> AddManagerAsync(string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemCategoryResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory AddMenuItemCategory(int managerId, string name, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemCategoryResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory> AddMenuItemCategoryAsync(int managerId, string name, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemCategoryResponse")]
        bool EditMenuItemCategory(int managerId, OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory menuItemCategoryToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemCategoryResponse")]
        System.Threading.Tasks.Task<bool> EditMenuItemCategoryAsync(int managerId, OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory menuItemCategoryToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemCategoryResponse")]
        bool RemoveMenuItemCategory(int managerId, int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemCategory", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemCategoryResponse")]
        System.Threading.Tasks.Task<bool> RemoveMenuItemCategoryAsync(int managerId, int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.MenuItem AddMenuItem(int managerId, string name, string description, int categoryId, OrderServiceClient.WaiterDataAccessWCFService.Money price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddMenuItemResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItem> AddMenuItemAsync(int managerId, string name, string description, int categoryId, OrderServiceClient.WaiterDataAccessWCFService.Money price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemResponse")]
        bool EditMenuItem(int managerId, OrderServiceClient.WaiterDataAccessWCFService.MenuItem menuItemToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditMenuItemResponse")]
        System.Threading.Tasks.Task<bool> EditMenuItemAsync(int managerId, OrderServiceClient.WaiterDataAccessWCFService.MenuItem menuItemToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemResponse")]
        bool RemoveMenuItem(int managerId, int menuItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItem", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveMenuItemResponse")]
        System.Threading.Tasks.Task<bool> RemoveMenuItemAsync(int managerId, int menuItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddWaiterResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.UserContext AddWaiter(int managerId, string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddWaiterResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> AddWaiterAsync(int managerId, string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditWaiterResponse")]
        bool EditWaiter(int managerId, OrderServiceClient.WaiterDataAccessWCFService.UserContext waiterToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditWaiterResponse")]
        System.Threading.Tasks.Task<bool> EditWaiterAsync(int managerId, OrderServiceClient.WaiterDataAccessWCFService.UserContext waiterToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveWaiterResponse")]
        bool RemoveWaiter(int managerId, int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveWaiter", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveWaiterResponse")]
        System.Threading.Tasks.Task<bool> RemoveWaiterAsync(int managerId, int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/GetWaiters", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/GetWaitersResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.UserContext[] GetWaiters(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/GetWaiters", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/GetWaitersResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext[]> GetWaitersAsync(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddTableResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.Table AddTable(int managerId, int tableNumber, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/AddTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/AddTableResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Table> AddTableAsync(int managerId, int tableNumber, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditTableResponse")]
        bool EditTable(int managerId, OrderServiceClient.WaiterDataAccessWCFService.Table tableToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/EditTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/EditTableResponse")]
        System.Threading.Tasks.Task<bool> EditTableAsync(int managerId, OrderServiceClient.WaiterDataAccessWCFService.Table tableToEdit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveTableResponse")]
        bool RemoveTable(int managerId, int tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveTable", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveTableResponse")]
        System.Threading.Tasks.Task<bool> RemoveTableAsync(int managerId, int tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/GetOrders", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/GetOrdersResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.Order[] GetOrders(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/GetOrders", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/GetOrdersResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order[]> GetOrdersAsync(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveOrder", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveOrderResponse")]
        bool RemoveOrder(int managerId, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManagerDataAccessWCFService/RemoveOrder", ReplyAction="http://tempuri.org/IManagerDataAccessWCFService/RemoveOrderResponse")]
        System.Threading.Tasks.Task<bool> RemoveOrderAsync(int managerId, int orderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManagerDataAccessWCFServiceChannel : OrderServiceClient.WaiterDataAccessWCFService.IManagerDataAccessWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManagerDataAccessWCFServiceClient : System.ServiceModel.ClientBase<OrderServiceClient.WaiterDataAccessWCFService.IManagerDataAccessWCFService>, OrderServiceClient.WaiterDataAccessWCFService.IManagerDataAccessWCFService {
        
        public ManagerDataAccessWCFServiceClient() {
        }
        
        public ManagerDataAccessWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManagerDataAccessWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerDataAccessWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManagerDataAccessWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.UserContext LogIn(string login1, string password) {
            return base.Channel.LogIn(login1, password);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> LogInAsync(string login, string password) {
            return base.Channel.LogInAsync(login, password);
        }
        
        public bool LogOut(int id) {
            return base.Channel.LogOut(id);
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync(int id) {
            return base.Channel.LogOutAsync(id);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[] GetMenuItemCategories(int userId) {
            return base.Channel.GetMenuItemCategories(userId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId) {
            return base.Channel.GetMenuItemCategoriesAsync(userId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItem[] GetMenuItems(int userId) {
            return base.Channel.GetMenuItems(userId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItem[]> GetMenuItemsAsync(int userId) {
            return base.Channel.GetMenuItemsAsync(userId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.Table[] GetTables(int userId) {
            return base.Channel.GetTables(userId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Table[]> GetTablesAsync(int userId) {
            return base.Channel.GetTablesAsync(userId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.UserContext AddManager(string firstName, string lastName, string login, string password) {
            return base.Channel.AddManager(firstName, lastName, login, password);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> AddManagerAsync(string firstName, string lastName, string login, string password) {
            return base.Channel.AddManagerAsync(firstName, lastName, login, password);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory AddMenuItemCategory(int managerId, string name, string description) {
            return base.Channel.AddMenuItemCategory(managerId, name, description);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory> AddMenuItemCategoryAsync(int managerId, string name, string description) {
            return base.Channel.AddMenuItemCategoryAsync(managerId, name, description);
        }
        
        public bool EditMenuItemCategory(int managerId, OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory menuItemCategoryToEdit) {
            return base.Channel.EditMenuItemCategory(managerId, menuItemCategoryToEdit);
        }
        
        public System.Threading.Tasks.Task<bool> EditMenuItemCategoryAsync(int managerId, OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory menuItemCategoryToEdit) {
            return base.Channel.EditMenuItemCategoryAsync(managerId, menuItemCategoryToEdit);
        }
        
        public bool RemoveMenuItemCategory(int managerId, int categoryId) {
            return base.Channel.RemoveMenuItemCategory(managerId, categoryId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMenuItemCategoryAsync(int managerId, int categoryId) {
            return base.Channel.RemoveMenuItemCategoryAsync(managerId, categoryId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItem AddMenuItem(int managerId, string name, string description, int categoryId, OrderServiceClient.WaiterDataAccessWCFService.Money price) {
            return base.Channel.AddMenuItem(managerId, name, description, categoryId, price);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItem> AddMenuItemAsync(int managerId, string name, string description, int categoryId, OrderServiceClient.WaiterDataAccessWCFService.Money price) {
            return base.Channel.AddMenuItemAsync(managerId, name, description, categoryId, price);
        }
        
        public bool EditMenuItem(int managerId, OrderServiceClient.WaiterDataAccessWCFService.MenuItem menuItemToEdit) {
            return base.Channel.EditMenuItem(managerId, menuItemToEdit);
        }
        
        public System.Threading.Tasks.Task<bool> EditMenuItemAsync(int managerId, OrderServiceClient.WaiterDataAccessWCFService.MenuItem menuItemToEdit) {
            return base.Channel.EditMenuItemAsync(managerId, menuItemToEdit);
        }
        
        public bool RemoveMenuItem(int managerId, int menuItemId) {
            return base.Channel.RemoveMenuItem(managerId, menuItemId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMenuItemAsync(int managerId, int menuItemId) {
            return base.Channel.RemoveMenuItemAsync(managerId, menuItemId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.UserContext AddWaiter(int managerId, string firstName, string lastName, string login, string password) {
            return base.Channel.AddWaiter(managerId, firstName, lastName, login, password);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> AddWaiterAsync(int managerId, string firstName, string lastName, string login, string password) {
            return base.Channel.AddWaiterAsync(managerId, firstName, lastName, login, password);
        }
        
        public bool EditWaiter(int managerId, OrderServiceClient.WaiterDataAccessWCFService.UserContext waiterToEdit) {
            return base.Channel.EditWaiter(managerId, waiterToEdit);
        }
        
        public System.Threading.Tasks.Task<bool> EditWaiterAsync(int managerId, OrderServiceClient.WaiterDataAccessWCFService.UserContext waiterToEdit) {
            return base.Channel.EditWaiterAsync(managerId, waiterToEdit);
        }
        
        public bool RemoveWaiter(int managerId, int waiterId) {
            return base.Channel.RemoveWaiter(managerId, waiterId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveWaiterAsync(int managerId, int waiterId) {
            return base.Channel.RemoveWaiterAsync(managerId, waiterId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.UserContext[] GetWaiters(int managerId) {
            return base.Channel.GetWaiters(managerId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext[]> GetWaitersAsync(int managerId) {
            return base.Channel.GetWaitersAsync(managerId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.Table AddTable(int managerId, int tableNumber, string description) {
            return base.Channel.AddTable(managerId, tableNumber, description);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Table> AddTableAsync(int managerId, int tableNumber, string description) {
            return base.Channel.AddTableAsync(managerId, tableNumber, description);
        }
        
        public bool EditTable(int managerId, OrderServiceClient.WaiterDataAccessWCFService.Table tableToEdit) {
            return base.Channel.EditTable(managerId, tableToEdit);
        }
        
        public System.Threading.Tasks.Task<bool> EditTableAsync(int managerId, OrderServiceClient.WaiterDataAccessWCFService.Table tableToEdit) {
            return base.Channel.EditTableAsync(managerId, tableToEdit);
        }
        
        public bool RemoveTable(int managerId, int tableId) {
            return base.Channel.RemoveTable(managerId, tableId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveTableAsync(int managerId, int tableId) {
            return base.Channel.RemoveTableAsync(managerId, tableId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.Order[] GetOrders(int managerId) {
            return base.Channel.GetOrders(managerId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order[]> GetOrdersAsync(int managerId) {
            return base.Channel.GetOrdersAsync(managerId);
        }
        
        public bool RemoveOrder(int managerId, int orderId) {
            return base.Channel.RemoveOrder(managerId, orderId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveOrderAsync(int managerId, int orderId) {
            return base.Channel.RemoveOrderAsync(managerId, orderId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WaiterDataAccessWCFService.IWaiterDataAccessWCFService", CallbackContract=typeof(OrderServiceClient.WaiterDataAccessWCFService.IWaiterDataAccessWCFServiceCallback))]
    public interface IWaiterDataAccessWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.UserContext LogIn([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> LogInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        bool LogOut(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        System.Threading.Tasks.Task<bool> LogOutAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[] GetMenuItemCategories(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.MenuItem[] GetMenuItems(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItem[]> GetMenuItemsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.Table[] GetTables(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Table[]> GetTablesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetAllPastOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetAllPastOrdersResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.Order[] GetAllPastOrders(int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetAllPastOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetAllPastOrdersResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order[]> GetAllPastOrdersAsync(int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetPastOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetPastOrdersResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.Order[] GetPastOrders(int waiterId, int firstIndex, int lastIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetPastOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetPastOrdersResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order[]> GetPastOrdersAsync(int waiterId, int firstIndex, int lastIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetActiveOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetActiveOrdersResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.Order[] GetActiveOrders(int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/GetActiveOrders", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/GetActiveOrdersResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order[]> GetActiveOrdersAsync(int waiterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/SetOrderState", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/SetOrderStateResponse")]
        bool SetOrderState(int waiterId, int orderId, OrderServiceClient.WaiterDataAccessWCFService.OrderState state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/SetOrderState", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/SetOrderStateResponse")]
        System.Threading.Tasks.Task<bool> SetOrderStateAsync(int waiterId, int orderId, OrderServiceClient.WaiterDataAccessWCFService.OrderState state);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWaiterDataAccessWCFServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/AcceptNewOrder", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/AcceptNewOrderResponse")]
        bool AcceptNewOrder(OrderServiceClient.WaiterDataAccessWCFService.Order order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWaiterDataAccessWCFService/ConfirmUserPaid", ReplyAction="http://tempuri.org/IWaiterDataAccessWCFService/ConfirmUserPaidResponse")]
        bool ConfirmUserPaid(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWaiterDataAccessWCFServiceChannel : OrderServiceClient.WaiterDataAccessWCFService.IWaiterDataAccessWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WaiterDataAccessWCFServiceClient : System.ServiceModel.DuplexClientBase<OrderServiceClient.WaiterDataAccessWCFService.IWaiterDataAccessWCFService>, OrderServiceClient.WaiterDataAccessWCFService.IWaiterDataAccessWCFService {
        
        public WaiterDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WaiterDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WaiterDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WaiterDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WaiterDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.UserContext LogIn(string login1, string password) {
            return base.Channel.LogIn(login1, password);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> LogInAsync(string login, string password) {
            return base.Channel.LogInAsync(login, password);
        }
        
        public bool LogOut(int id) {
            return base.Channel.LogOut(id);
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync(int id) {
            return base.Channel.LogOutAsync(id);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[] GetMenuItemCategories(int userId) {
            return base.Channel.GetMenuItemCategories(userId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId) {
            return base.Channel.GetMenuItemCategoriesAsync(userId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItem[] GetMenuItems(int userId) {
            return base.Channel.GetMenuItems(userId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItem[]> GetMenuItemsAsync(int userId) {
            return base.Channel.GetMenuItemsAsync(userId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.Table[] GetTables(int userId) {
            return base.Channel.GetTables(userId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Table[]> GetTablesAsync(int userId) {
            return base.Channel.GetTablesAsync(userId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.Order[] GetAllPastOrders(int waiterId) {
            return base.Channel.GetAllPastOrders(waiterId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order[]> GetAllPastOrdersAsync(int waiterId) {
            return base.Channel.GetAllPastOrdersAsync(waiterId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.Order[] GetPastOrders(int waiterId, int firstIndex, int lastIndex) {
            return base.Channel.GetPastOrders(waiterId, firstIndex, lastIndex);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order[]> GetPastOrdersAsync(int waiterId, int firstIndex, int lastIndex) {
            return base.Channel.GetPastOrdersAsync(waiterId, firstIndex, lastIndex);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.Order[] GetActiveOrders(int waiterId) {
            return base.Channel.GetActiveOrders(waiterId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order[]> GetActiveOrdersAsync(int waiterId) {
            return base.Channel.GetActiveOrdersAsync(waiterId);
        }
        
        public bool SetOrderState(int waiterId, int orderId, OrderServiceClient.WaiterDataAccessWCFService.OrderState state) {
            return base.Channel.SetOrderState(waiterId, orderId, state);
        }
        
        public System.Threading.Tasks.Task<bool> SetOrderStateAsync(int waiterId, int orderId, OrderServiceClient.WaiterDataAccessWCFService.OrderState state) {
            return base.Channel.SetOrderStateAsync(waiterId, orderId, state);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WaiterDataAccessWCFService.IClientDataAccessWCFService", CallbackContract=typeof(OrderServiceClient.WaiterDataAccessWCFService.IClientDataAccessWCFServiceCallback))]
    public interface IClientDataAccessWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.UserContext LogIn([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogIn", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogInResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> LogInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        bool LogOut(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/LogOut", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/LogOutResponse")]
        System.Threading.Tasks.Task<bool> LogOutAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[] GetMenuItemCategories(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategories", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemCategoriesResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.MenuItem[] GetMenuItems(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItems", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetMenuItemsResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItem[]> GetMenuItemsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.Table[] GetTables(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBaseDataAccessWCFService/GetTables", ReplyAction="http://tempuri.org/IBaseDataAccessWCFService/GetTablesResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Table[]> GetTablesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDataAccessWCFService/AddClient", ReplyAction="http://tempuri.org/IClientDataAccessWCFService/AddClientResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.UserContext AddClient(string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDataAccessWCFService/AddClient", ReplyAction="http://tempuri.org/IClientDataAccessWCFService/AddClientResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> AddClientAsync(string firstName, string lastName, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDataAccessWCFService/AddOrder", ReplyAction="http://tempuri.org/IClientDataAccessWCFService/AddOrderResponse")]
        OrderServiceClient.WaiterDataAccessWCFService.Order AddOrder(int userId, int tableId, OrderServiceClient.WaiterDataAccessWCFService.TupleOfintint[] menuItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDataAccessWCFService/AddOrder", ReplyAction="http://tempuri.org/IClientDataAccessWCFService/AddOrderResponse")]
        System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order> AddOrderAsync(int userId, int tableId, OrderServiceClient.WaiterDataAccessWCFService.TupleOfintint[] menuItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDataAccessWCFService/PayForOrder", ReplyAction="http://tempuri.org/IClientDataAccessWCFService/PayForOrderResponse")]
        bool PayForOrder(int userId, int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDataAccessWCFService/PayForOrder", ReplyAction="http://tempuri.org/IClientDataAccessWCFService/PayForOrderResponse")]
        System.Threading.Tasks.Task<bool> PayForOrderAsync(int userId, int orderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientDataAccessWCFServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDataAccessWCFService/NotifyOrderAccepted", ReplyAction="http://tempuri.org/IClientDataAccessWCFService/NotifyOrderAcceptedResponse")]
        void NotifyOrderAccepted(int orderId, OrderServiceClient.WaiterDataAccessWCFService.UserContext waiter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDataAccessWCFService/NotifyOrderOnHold", ReplyAction="http://tempuri.org/IClientDataAccessWCFService/NotifyOrderOnHoldResponse")]
        void NotifyOrderOnHold(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientDataAccessWCFService/NotifyOrderAwaitingDelivery", ReplyAction="http://tempuri.org/IClientDataAccessWCFService/NotifyOrderAwaitingDeliveryRespons" +
            "e")]
        void NotifyOrderAwaitingDelivery(int oderId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientDataAccessWCFServiceChannel : OrderServiceClient.WaiterDataAccessWCFService.IClientDataAccessWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientDataAccessWCFServiceClient : System.ServiceModel.DuplexClientBase<OrderServiceClient.WaiterDataAccessWCFService.IClientDataAccessWCFService>, OrderServiceClient.WaiterDataAccessWCFService.IClientDataAccessWCFService {
        
        public ClientDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ClientDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ClientDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientDataAccessWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.UserContext LogIn(string login1, string password) {
            return base.Channel.LogIn(login1, password);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> LogInAsync(string login, string password) {
            return base.Channel.LogInAsync(login, password);
        }
        
        public bool LogOut(int id) {
            return base.Channel.LogOut(id);
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync(int id) {
            return base.Channel.LogOutAsync(id);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[] GetMenuItemCategories(int userId) {
            return base.Channel.GetMenuItemCategories(userId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItemCategory[]> GetMenuItemCategoriesAsync(int userId) {
            return base.Channel.GetMenuItemCategoriesAsync(userId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.MenuItem[] GetMenuItems(int userId) {
            return base.Channel.GetMenuItems(userId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.MenuItem[]> GetMenuItemsAsync(int userId) {
            return base.Channel.GetMenuItemsAsync(userId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.Table[] GetTables(int userId) {
            return base.Channel.GetTables(userId);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Table[]> GetTablesAsync(int userId) {
            return base.Channel.GetTablesAsync(userId);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.UserContext AddClient(string firstName, string lastName, string login, string password) {
            return base.Channel.AddClient(firstName, lastName, login, password);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.UserContext> AddClientAsync(string firstName, string lastName, string login, string password) {
            return base.Channel.AddClientAsync(firstName, lastName, login, password);
        }
        
        public OrderServiceClient.WaiterDataAccessWCFService.Order AddOrder(int userId, int tableId, OrderServiceClient.WaiterDataAccessWCFService.TupleOfintint[] menuItems) {
            return base.Channel.AddOrder(userId, tableId, menuItems);
        }
        
        public System.Threading.Tasks.Task<OrderServiceClient.WaiterDataAccessWCFService.Order> AddOrderAsync(int userId, int tableId, OrderServiceClient.WaiterDataAccessWCFService.TupleOfintint[] menuItems) {
            return base.Channel.AddOrderAsync(userId, tableId, menuItems);
        }
        
        public bool PayForOrder(int userId, int orderId) {
            return base.Channel.PayForOrder(userId, orderId);
        }
        
        public System.Threading.Tasks.Task<bool> PayForOrderAsync(int userId, int orderId) {
            return base.Channel.PayForOrderAsync(userId, orderId);
        }
    }
}
